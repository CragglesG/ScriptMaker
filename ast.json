[
  {
    "type": "Var",
    "name": "test",
    "value": {
      "type": "Literal",
      "value": "Testing... Testing"
    }
  },
  {
    "type": "Call",
    "caller": {
      "type": "Var",
      "name": "display"
    },
    "args": [
      {
        "type": "Var",
        "name": "test"
      }
    ]
  },
  {
    "type": "Struct",
    "name": "T",
    "members": [
      "t",
      "e",
      "s",
      "t"
    ]
  },
  {
    "type": "Instance",
    "name": "T",
    "members": {
      "t": {
        "type": "Literal",
        "value": 4
      },
      "e": {
        "type": "Literal",
        "value": 2
      },
      "s": {
        "type": "Literal",
        "value": 3
      }
    }
  },
  {
    "type": "Call",
    "caller": {
      "type": "Var",
      "name": "display"
    },
    "args": [
      {
        "type": "Var",
        "name": "T"
      }
    ]
  },
  {
    "type": "Func",
    "name": "testFunc",
    "params": [
      "a",
      "b",
      "c"
    ],
    "body": [
      {
        "type": "Call",
        "caller": {
          "type": "Var",
          "name": "display"
        },
        "args": [
          {
            "type": "Var",
            "name": "a"
          },
          {
            "type": "Var",
            "name": "b"
          },
          {
            "type": "Var",
            "name": "c"
          }
        ]
      },
      {
        "type": "Return",
        "value": {
          "type": "Var",
          "name": "a"
        }
      }
    ]
  },
  {
    "type": "Var",
    "name": "funcResponse",
    "value": {
      "type": "Call",
      "caller": {
        "type": "Var",
        "name": "testFunc"
      },
      "args": [
        {
          "type": "Literal",
          "value": 1
        },
        {
          "type": "Literal",
          "value": 2
        },
        {
          "type": "Literal",
          "value": 3
        }
      ]
    }
  },
  {
    "type": "For",
    "id": "i",
    "range": [
      {
        "type": "Literal",
        "value": 0
      },
      {
        "type": "Literal",
        "value": 2
      }
    ],
    "body": [
      {
        "type": "Call",
        "caller": {
          "type": "Var",
          "name": "display"
        },
        "args": [
          {
            "type": "Var",
            "name": "i"
          }
        ]
      }
    ]
  },
  {
    "type": "Var",
    "name": "wlh",
    "value": {
      "type": "Literal",
      "value": 1
    }
  },
  {
    "type": "While",
    "condition": {
      "type": "Binary",
      "left": {
        "type": "Var",
        "name": "wlh"
      },
      "operator": "==",
      "right": {
        "type": "Unary",
        "operator": "!",
        "apply": {
          "type": "Literal",
          "value": 1
        }
      }
    },
    "body": [
      {
        "type": "Call",
        "caller": {
          "type": "Var",
          "name": "display"
        },
        "args": [
          {
            "type": "Literal",
            "value": "Better get out of this while loop"
          }
        ]
      },
      {
        "type": "Var",
        "name": "wlh",
        "value": {
          "type": "Literal",
          "value": 2
        }
      }
    ]
  },
  {
    "type": "Conditional",
    "condition": {
      "type": "Binary",
      "left": {
        "type": "Literal",
        "value": 1
      },
      "operator": "==",
      "right": {
        "type": "Unary",
        "operator": "!",
        "apply": {
          "type": "Literal",
          "value": 2
        }
      }
    },
    "body": [
      {
        "type": "Call",
        "caller": {
          "type": "Var",
          "name": "display"
        },
        "args": [
          {
            "type": "Literal",
            "value": "PROBLEM - IF REACHED"
          }
        ]
      }
    ],
    "otherwise": [
      {
        "type": "Conditional",
        "condition": {
          "type": "Binary",
          "left": {
            "type": "Literal",
            "value": 1
          },
          "operator": "==",
          // This seems problematic, it's also seen in the lexer
          "right": {
            "type": "Unary",
            "operator": "!",
            "apply": {
              "type": "Literal",
              "value": 1
            }
          }
        },
        "body": [
          {
            "type": "Call",
            "caller": {
              "type": "Var",
              "name": "display"
            },
            "args": [
              {
                "type": "Literal",
                "value": "YOU FOUND ME!"
              }
            ]
          }
        ],
        "otherwise": [
          {
            "type": "Conditional",
            "condition": {
              "type": "Literal",
              "value": true
            },
            "body": [
              {
                "type": "Call",
                "caller": {
                  "type": "Var",
                  "name": "display"
                },
                "args": [
                  {
                    "type": "Literal",
                    "value": "PROBLEM - ELSE REACHED"
                  }
                ]
              }
            ],
            "otherwise": []
          }
        ]
      }
    ]
  }
]